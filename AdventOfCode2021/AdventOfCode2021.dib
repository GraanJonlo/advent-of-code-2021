#!markdown

# Advent of Code 2021

#!fsharp

#load "Library.fs"

open System
open System.IO

open AdventOfCode2021

#!markdown

## Day 1.1

Get the increases in depth

#!fsharp

let day01Data =
    File.ReadAllLines("input01.txt")
    |> Array.map int
    |> Array.map ((*) 1<metre>)
    |> List.ofArray

let slidingWindow = Scan.slidingWindow 1
let resampler = Scan.resample slidingWindow

day01Data |> Scan.numberOfDepthIncreases resampler

#!markdown

## Day 1.2

Get increases in depth with a 3 element sliding window

#!fsharp

let slidingWindow = Scan.slidingWindow 3
let resampler = Scan.resample slidingWindow

day01Data |> Scan.numberOfDepthIncreases resampler

#!markdown

## Day 2.1

Get final position

#!fsharp

let day02Data =
    File.ReadAllLines("input02.txt")
    |> Array.map (fun x ->
        match (x.Split(" ")) with
        | [| direction; distance |] -> (direction, int distance)
        | _ -> ("", 0)
    )
    |> Array.map (fun (direction, distance) ->
        match direction with
        | "forward" -> Forward (distance * 1<metre>)
        | "up" -> Up distance
        | "down" -> Down distance
        | _ -> NoMove
    )
    |> List.ofArray

day02Data
|> Move.finalPosition
|> fun (x, y) -> x * y

#!markdown

## Day 2.2

Get final position with proper sub moves

#!fsharp

Position.updatePosition Position.move day02Data { horizontal=0<metre>; depth=0<metre>; aim=0}
|> fun { horizontal = h; depth = d; aim = _ } -> h * d

#!markdown

## Day 3.1
Get the gamma and the epsilon

#!fsharp

let day03Data =
    File.ReadAllLines("input03.txt")
    |> Array.map (fun x ->
        x.ToCharArray()
        |> Array.map int
        |> Array.map (fun y -> y-48)
        |> List.ofArray
        |> Vector
    )
    |> List.ofArray

let gamma = day03Data |> Vector.gamma
let epsilon = day03Data |> Vector.epsilon

(gamma |> Vector.parseInt 2) * (epsilon |> Vector.parseInt 2)
